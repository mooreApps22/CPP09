MergeInsertion

	Pairwise comparison:	First, pairs of elements are compared
	Recursion:				Second, the large elements are sorted recursively
	Insertion:				Third, the smaller elements are inserted into the larger half using binary insertion 

	There are N elements

https://arxiv.org/pdf/1905.09656	


	MergeInsertion
		Deque	_aElements
		List	_bElements
		void	pairwiseCompasion();
		void	recursivelySortLarger();
		void	binaryInsertSmaller();


		
		void	pairwiseCompasion();

			1. group elements into n/2 pairs
				- each pair is sorted using one comparison
					* How are the pairs grouped programitically?
				- the elements that are called a1, a2, a3 ... to an a of n/2
				- the elements that are called b1, b2, b3 ... to an b of n/2
				- with ai > bi for all 1 <= i <= n/2
				- if n is old then add the last value in a to b

			
				My Personal Theory: I iterate over the Deque of _aElements, compare every two numbers, which ever is smaller will give it's value to a node in List  _bElements and delete itself.
					There is now a set of larger elements and a set of smaller elements. I think that the each List should point to it's corresponding larder _aElement, not to the next _bElement. This should be fine because I assign a pointer of any type, including Deque. But I not sure what the odd element points to.

		void	recursivelySortLarger();
	
			2. The n/2 size of _aElements re sorted sorted recursively
				- ai < ai+1 ( ai > bi still holds)			
				
				My personal Theory: so the recursion need a base case to stop it. I need to decide what method of comparison is being made in each recursive call. It's called MergeInsertion. Is that a clue?  

		void	binaryInsertSmaller();

			3. The _bElements are inserted back into _aElements using binary insert. 


				My personal Theory: I'm not sure how the binary insertion is achieve, what is supposed to order of comparison checks between which numbers? 
