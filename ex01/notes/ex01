
Exercise 01: Reverse Polish Notation
	The program takes an "inverted Polish mathematical expression" as an argument
	The numbers used in this operation and passed as arguments will always be less than 10
		the calcuation itself but also the result do not take into account this rule
	the correct result is output to standard output
	error messages should be displayed
	operation tokesn are "+-/*"
	You don't need to handle brackets or decimal numbers

	Ex01: stack, need LIFO behavior to pop operands
		operation have to be parsed in linear order
		(have access to underlying through vector)

	RPN 
		grouped numbers before an arithmetic symbol are operated on by that symbol
			2 5 * = 10
			2 5 * 7 + = 17
			2 5 * 7 + 2 3 - + = 16
			2 5 * 7 + 2 3 - + 2 2 * / = 4


	Refined Notes:
		
		The program name is RPN
			Usage is ./RPN <"8 9 * 9 - 9 - 9 - 4 - 1 +">
		Argv[1] is an inverted polish math expression
			numbers operands must be int less than 10
				the calculation and result do not care about this rule
		RPN must output the correct result to std output
		Display an error message if there's an error
		tokens include "+-/*012345679 "

	Thoughts:
		Because I am using a STL stack, and stacks are Last in First argv[1] should be pushed into the stack from the last character to the first
			what why the characters are popped in order
			unless it does make more sense to work back to front?
